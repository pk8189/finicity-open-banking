"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    SyncBaseClient,
    AsyncBaseClient,
    default_request_options,
    RequestOptions,
    to_encodable,
)
from open_banking.resources.decisioning.v1.consumers.portfolios import (
    AsyncPortfoliosClient,
    PortfoliosClient,
)
from open_banking.resources.decisioning.v1.consumers.reports import (
    ReportsClient,
    AsyncReportsClient,
)
import typing
from open_banking.types.decisioning.v1.consumers import models, params


class ConsumersClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.portfolios = PortfoliosClient(base_client=self._base_client)
        self.reports = ReportsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def put(
        self,
        *,
        data: params.ConsumerUpdate,
        consumer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Modify an existing consumer. All fields are required for a consumer record, but individual fields for this call are optional because fields that are not specified will be left unchanged.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerConsumerUpdate)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PUT",
            path=f"/decisioning/v1/consumers/{consumer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            json=_json,
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        consumer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Consumer:
        """
        Get the details of a consumer record by consumer ID.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/decisioning/v1/consumers/{consumer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.Consumer,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncConsumersClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.portfolios = AsyncPortfoliosClient(base_client=self._base_client)
        self.reports = AsyncReportsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def put(
        self,
        *,
        data: params.ConsumerUpdate,
        consumer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Modify an existing consumer. All fields are required for a consumer record, but individual fields for this call are optional because fields that are not specified will be left unchanged.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerConsumerUpdate)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PUT",
            path=f"/decisioning/v1/consumers/{consumer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            json=_json,
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        consumer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Consumer:
        """
        Get the details of a consumer record by consumer ID.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/decisioning/v1/consumers/{consumer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.Consumer,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
