"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    RequestOptions,
    to_encodable,
    QueryParams,
    default_request_options,
    encode_param,
    AsyncBaseClient,
    SyncBaseClient,
)
from open_banking.types.decisioning.v2.customers.transactions import params
import typing


class TransactionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.TransactionsReportConstraints,
        customer_id: str,
        to_date: int,
        callback_url: typing.Optional[str] = None,
        include_pending: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Generate a Transaction Report for the given accounts under the given customer. This service retrieves up to 24 months of transaction history for the given customer. It then uses this information to generate the Transaction Report.

        This is a premium service. A billable event will be created upon the successful generation of the Transactions Report.

        Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).

        There cannot be more than 24 months between `fromDate` and `toDate`.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["toDate"] = encode_param(to_date, False)
        if callback_url is not None:
            _query["callbackUrl"] = encode_param(callback_url, False)
        if include_pending is not None:
            _query["includePending"] = encode_param(include_pending, False)
        _json = to_encodable(
            item=data, dump_with=params._SerializerTransactionsReportConstraints
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path=f"/decisioning/v2/customers/{customer_id}/transactions",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            json=_json,
            cast_to=typing.Any,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncTransactionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.TransactionsReportConstraints,
        customer_id: str,
        to_date: int,
        callback_url: typing.Optional[str] = None,
        include_pending: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Generate a Transaction Report for the given accounts under the given customer. This service retrieves up to 24 months of transaction history for the given customer. It then uses this information to generate the Transaction Report.

        This is a premium service. A billable event will be created upon the successful generation of the Transactions Report.

        Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).

        There cannot be more than 24 months between `fromDate` and `toDate`.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["toDate"] = encode_param(to_date, False)
        if callback_url is not None:
            _query["callbackUrl"] = encode_param(callback_url, False)
        if include_pending is not None:
            _query["includePending"] = encode_param(include_pending, False)
        _json = to_encodable(
            item=data, dump_with=params._SerializerTransactionsReportConstraints
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path=f"/decisioning/v2/customers/{customer_id}/transactions",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            json=_json,
            cast_to=typing.Any,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
