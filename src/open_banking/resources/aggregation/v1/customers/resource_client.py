"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    AsyncBaseClient,
    default_request_options,
    RequestOptions,
    SyncBaseClient,
    encode_param,
    QueryParams,
    to_encodable,
)
from open_banking.resources.aggregation.v1.customers.accounts import (
    AccountsClient,
    AsyncAccountsClient,
)
from open_banking.resources.aggregation.v1.customers.institution_logins import (
    AsyncInstitutionLoginsClient,
    InstitutionLoginsClient,
)
from open_banking.resources.aggregation.v1.customers.subscriptions import (
    SubscriptionsClient,
    AsyncSubscriptionsClient,
)
from open_banking.resources.aggregation.v1.customers.application import (
    ApplicationClient,
    AsyncApplicationClient,
)
from open_banking.resources.aggregation.v1.customers.assets import (
    AsyncAssetsClient,
    AssetsClient,
)
from open_banking.resources.aggregation.v1.customers.institutions import (
    InstitutionsClient,
    AsyncInstitutionsClient,
)
from open_banking.resources.aggregation.v1.customers.pay_statements import (
    AsyncPayStatementsClient,
    PayStatementsClient,
)
from open_banking.resources.aggregation.v1.customers.applications import (
    AsyncApplicationsClient,
    ApplicationsClient,
)
import typing
from open_banking.types.aggregation.v1.customers import params, models


class CustomersClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.accounts = AccountsClient(base_client=self._base_client)
        self.institution_logins = InstitutionLoginsClient(base_client=self._base_client)
        self.subscriptions = SubscriptionsClient(base_client=self._base_client)
        self.application = ApplicationClient(base_client=self._base_client)
        self.assets = AssetsClient(base_client=self._base_client)
        self.institutions = InstitutionsClient(base_client=self._base_client)
        self.pay_statements = PayStatementsClient(base_client=self._base_client)
        self.applications = ApplicationsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def put(
        self,
        *,
        data: params.CustomerUpdate,
        customer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Modify an enrolled customer by ID.

        You must specify either `firstName`, `lastName`, or both in the request.

        _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerCustomerUpdate)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PUT",
            path=f"/aggregation/v1/customers/{customer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            json=_json,
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        customer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Retrieve a customer by ID.

        _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=typing.Any,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        start: typing.Optional[int] = None,
        type: typing.Optional[str] = None,
        username: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Customers:
        """
        Find all customers enrolled by the current partner, where the search text is found in the customer's username or any combination of `firstName` and `lastName` fields. If no search text is provided, all customers will be returned.

        _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if search is not None:
            _query["search"] = encode_param(search, False)
        if start is not None:
            _query["start"] = encode_param(start, False)
        if type is not None:
            _query["type"] = encode_param(type, False)
        if username is not None:
            _query["username"] = encode_param(username, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/aggregation/v1/customers",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.Customers,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self,
        *,
        customer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete access to a customer and all associated accounts.
        This will delete access to the customer and all their linked accounts. The customer data will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise data retention policy consistent with legal and business purposes.
        ⚠️ Use this service carefully! It will not pause for confirmation before performing the operation!
        _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/aggregation/v1/customers/{customer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncCustomersClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.accounts = AsyncAccountsClient(base_client=self._base_client)
        self.institution_logins = AsyncInstitutionLoginsClient(
            base_client=self._base_client
        )
        self.subscriptions = AsyncSubscriptionsClient(base_client=self._base_client)
        self.application = AsyncApplicationClient(base_client=self._base_client)
        self.assets = AsyncAssetsClient(base_client=self._base_client)
        self.institutions = AsyncInstitutionsClient(base_client=self._base_client)
        self.pay_statements = AsyncPayStatementsClient(base_client=self._base_client)
        self.applications = AsyncApplicationsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def put(
        self,
        *,
        data: params.CustomerUpdate,
        customer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Modify an enrolled customer by ID.

        You must specify either `firstName`, `lastName`, or both in the request.

        _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerCustomerUpdate)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PUT",
            path=f"/aggregation/v1/customers/{customer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            json=_json,
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        customer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Retrieve a customer by ID.

        _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=typing.Any,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        start: typing.Optional[int] = None,
        type: typing.Optional[str] = None,
        username: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Customers:
        """
        Find all customers enrolled by the current partner, where the search text is found in the customer's username or any combination of `firstName` and `lastName` fields. If no search text is provided, all customers will be returned.

        _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if search is not None:
            _query["search"] = encode_param(search, False)
        if start is not None:
            _query["start"] = encode_param(start, False)
        if type is not None:
            _query["type"] = encode_param(type, False)
        if username is not None:
            _query["username"] = encode_param(username, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/aggregation/v1/customers",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.Customers,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self,
        *,
        customer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete access to a customer and all associated accounts.
        This will delete access to the customer and all their linked accounts. The customer data will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise data retention policy consistent with legal and business purposes.
        ⚠️ Use this service carefully! It will not pause for confirmation before performing the operation!
        _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/aggregation/v1/customers/{customer_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
