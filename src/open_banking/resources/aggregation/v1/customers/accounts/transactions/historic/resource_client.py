"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    AsyncBaseClient,
    default_request_options,
    RequestOptions,
    SyncBaseClient,
)
import typing


class HistoricClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        customer_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Connect to the account's financial institution and load up to 24 months of historic transactions for the account. Length of history varies by institution.

        This is a premium service. The billable event is a call to this service specifying a customer ID that has not been seen before by this service. (If this service is called multiple times with the same customer ID, to load transactions from multiple accounts, only one billable event has occurred.)

        The recommended timeout setting for this request is 180 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.

        The date range sent to the institution is calculated from the account's `createdDate`. This means that calling this service a second time for the same account normally will not add any new transactions for the account. For this reason, a second call to this service for a known account ID will usually return immediately.

        In a few specific scenarios, it may be desirable to force a second connection to the institution for a known account ID. Some examples are:

        * The institution's policy has changed, making more transactions available
        * Finicity has now added a longer transaction history support for the institution
        * The first call encountered an error, and the resulting Aggregation Ticket has now been fixed by the Finicity Support Team

        In these cases, the POST request can contain the parameter `force=true` in the request body to force the second connection.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path=f"/aggregation/v1/customers/{customer_id}/accounts/{account_id}/transactions/historic",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncHistoricClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        customer_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Connect to the account's financial institution and load up to 24 months of historic transactions for the account. Length of history varies by institution.

        This is a premium service. The billable event is a call to this service specifying a customer ID that has not been seen before by this service. (If this service is called multiple times with the same customer ID, to load transactions from multiple accounts, only one billable event has occurred.)

        The recommended timeout setting for this request is 180 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.

        The date range sent to the institution is calculated from the account's `createdDate`. This means that calling this service a second time for the same account normally will not add any new transactions for the account. For this reason, a second call to this service for a known account ID will usually return immediately.

        In a few specific scenarios, it may be desirable to force a second connection to the institution for a known account ID. Some examples are:

        * The institution's policy has changed, making more transactions available
        * Finicity has now added a longer transaction history support for the institution
        * The first call encountered an error, and the resulting Aggregation Ticket has now been fixed by the Finicity Support Team

        In these cases, the POST request can contain the parameter `force=true` in the request body to force the second connection.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path=f"/aggregation/v1/customers/{customer_id}/accounts/{account_id}/transactions/historic",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
