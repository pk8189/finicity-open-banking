"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    RequestOptions,
    AsyncBaseClient,
    encode_param,
    QueryParams,
    SyncBaseClient,
    default_request_options,
)
import typing
from open_banking.types.binary_response import BinaryResponse


class StatementClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        customer_id: str,
        account_id: str,
        index: typing.Optional[int] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BinaryResponse:
        """
        Retrieve the customer's bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.

        For certified financial institutions, statements are available for the following account types:
        * Checking
        * Savings
        * Money market
        * CDs
        * Investments
        * Mortgage
        * Credit cards
        * Loans
        * Line of credit
        * Student Loans

        Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if index is not None:
            _query["index"] = encode_param(index, False)
        if type is not None:
            _query["type"] = encode_param(type, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}/accounts/{account_id}/statement",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=BinaryResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncStatementClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        customer_id: str,
        account_id: str,
        index: typing.Optional[int] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BinaryResponse:
        """
        Retrieve the customer's bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.

        For certified financial institutions, statements are available for the following account types:
        * Checking
        * Savings
        * Money market
        * CDs
        * Investments
        * Mortgage
        * Credit cards
        * Loans
        * Line of credit
        * Student Loans

        Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if index is not None:
            _query["index"] = encode_param(index, False)
        if type is not None:
            _query["type"] = encode_param(type, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}/accounts/{account_id}/statement",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=BinaryResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
