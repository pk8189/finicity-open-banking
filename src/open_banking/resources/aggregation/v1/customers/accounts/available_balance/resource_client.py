"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    AsyncBaseClient,
    RequestOptions,
    default_request_options,
    SyncBaseClient,
)
from open_banking.resources.aggregation.v1.customers.accounts.available_balance.live import (
    AsyncLiveClient,
    LiveClient,
)
import typing
from open_banking.types.aggregation.v1.customers.accounts.available_balance import (
    models,
)


class AvailableBalanceClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.live = LiveClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        customer_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AvailableBalance:
        """
        Retrieve the latest cached available and cleared account balances for a customer. Since we update and store balances throughout the day, this is the most accurate balance information available when a connection to a financial institution is unavailable or when a faster response is needed. Only deposit account types are supported: Checking, Savings, Money Market, and CD.

        Note: this is a premium service, billable per every successful API call. Enrollment is required.

        _Supported account types_: "checking", "savings", "moneyMarket", "cd"

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}/accounts/{account_id}/availableBalance",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.AvailableBalance,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAvailableBalanceClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.live = AsyncLiveClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        customer_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AvailableBalance:
        """
        Retrieve the latest cached available and cleared account balances for a customer. Since we update and store balances throughout the day, this is the most accurate balance information available when a connection to a financial institution is unavailable or when a faster response is needed. Only deposit account types are supported: Checking, Savings, Money Market, and CD.

        Note: this is a premium service, billable per every successful API call. Enrollment is required.

        _Supported account types_: "checking", "savings", "moneyMarket", "cd"

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}/accounts/{account_id}/availableBalance",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.AvailableBalance,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
