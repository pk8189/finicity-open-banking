"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    default_request_options,
    AsyncBaseClient,
    RequestOptions,
    QueryParams,
    SyncBaseClient,
    encode_param,
)
import typing
from open_banking.types.aggregation.v1.customers.accounts.available_balance.live import (
    models,
)


class LiveClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        customer_id: str,
        account_id: str,
        balance_cache_interval: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AvailableBalance:
        """
        Retrieve the available and cleared account balances for a single account in real-time directly from a financial institution.
        You can define an additional query parameter `balance_cache_interval` to specify the time interval of the last cached balance. This parameter is used by the server to determine whether the cached balance is still valid or if it needs to be refreshed.


        Note: this is a premium service, billable per every successful API call.

        _Supported account types_: "checking", "savings", "moneyMarket", "cd"

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if balance_cache_interval is not None:
            _query["balance_cache_interval"] = encode_param(
                balance_cache_interval, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}/accounts/{account_id}/availableBalance/live",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.AvailableBalance,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncLiveClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        customer_id: str,
        account_id: str,
        balance_cache_interval: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AvailableBalance:
        """
        Retrieve the available and cleared account balances for a single account in real-time directly from a financial institution.
        You can define an additional query parameter `balance_cache_interval` to specify the time interval of the last cached balance. This parameter is used by the server to determine whether the cached balance is still valid or if it needs to be refreshed.


        Note: this is a premium service, billable per every successful API call.

        _Supported account types_: "checking", "savings", "moneyMarket", "cd"

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if balance_cache_interval is not None:
            _query["balance_cache_interval"] = encode_param(
                balance_cache_interval, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}/accounts/{account_id}/availableBalance/live",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.AvailableBalance,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
