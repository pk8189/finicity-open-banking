"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    SyncBaseClient,
    RequestOptions,
    AsyncBaseClient,
    default_request_options,
)
from open_banking.resources.aggregation.v1.customers.institution_logins.accounts.simple import (
    SimpleClient,
    AsyncSimpleClient,
)
import typing
from open_banking.types.aggregation.v1.customers.institution_logins.accounts import (
    models,
)


class AccountsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.simple = SimpleClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        customer_id: str,
        institution_login_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CustomerAccounts:
        """
        Refresh account and transaction data for all accounts associated with a given `institutionLoginId` with a connection to the institution.

        Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.

        Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.

        The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.

        Note: This service is not available for all Data Access Tiers.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path=f"/aggregation/v1/customers/{customer_id}/institutionLogins/{institution_login_id}/accounts",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.CustomerAccounts,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        customer_id: str,
        institution_login_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CustomerAccounts:
        """
        Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}/institutionLogins/{institution_login_id}/accounts",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.CustomerAccounts,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAccountsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.simple = AsyncSimpleClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        customer_id: str,
        institution_login_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CustomerAccounts:
        """
        Refresh account and transaction data for all accounts associated with a given `institutionLoginId` with a connection to the institution.

        Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.

        Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.

        The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.

        Note: This service is not available for all Data Access Tiers.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path=f"/aggregation/v1/customers/{customer_id}/institutionLogins/{institution_login_id}/accounts",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.CustomerAccounts,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        customer_id: str,
        institution_login_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CustomerAccounts:
        """
        Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/aggregation/v1/customers/{customer_id}/institutionLogins/{institution_login_id}/accounts",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.CustomerAccounts,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
