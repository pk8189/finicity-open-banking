"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    AsyncBaseClient,
    SyncBaseClient,
    RequestOptions,
    default_request_options,
)
from open_banking.resources.aggregation.v1.customers.institution_logins.accounts import (
    AsyncAccountsClient,
    AccountsClient,
)
import typing


class InstitutionLoginsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.accounts = AccountsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def delete(
        self,
        *,
        customer_id: str,
        institution_login_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete access to all customer accounts for a given FI.â€‹
        This will delete access to the underlying account(s) under a given Institution Login ID. The customer data will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise retention policy consistent with legal and business purposes.
        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/aggregation/v1/customers/{customer_id}/institutionLogins/{institution_login_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncInstitutionLoginsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.accounts = AsyncAccountsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def delete(
        self,
        *,
        customer_id: str,
        institution_login_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete access to all customer accounts for a given FI.â€‹
        This will delete access to the underlying account(s) under a given Institution Login ID. The customer data will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise retention policy consistent with legal and business purposes.
        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/aggregation/v1/customers/{customer_id}/institutionLogins/{institution_login_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
