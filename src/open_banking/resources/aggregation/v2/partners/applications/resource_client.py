"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    QueryParams,
    default_request_options,
    AsyncBaseClient,
    RequestOptions,
    encode_param,
    SyncBaseClient,
)
import typing
from open_banking.types.aggregation.v2.partners.applications import models


class ApplicationsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        app_name: typing.Optional[str] = None,
        application_id: typing.Optional[str] = None,
        modified_date: typing.Optional[int] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        pre_app_id: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        submitted_date: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppStatuses:
        """
        Get the status of your application registration(s).

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if app_name is not None:
            _query["appName"] = encode_param(app_name, False)
        if application_id is not None:
            _query["applicationId"] = encode_param(application_id, False)
        if modified_date is not None:
            _query["modifiedDate"] = encode_param(modified_date, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if page_size is not None:
            _query["pageSize"] = encode_param(page_size, False)
        if pre_app_id is not None:
            _query["preAppId"] = encode_param(pre_app_id, False)
        if status is not None:
            _query["status"] = encode_param(status, False)
        if submitted_date is not None:
            _query["submittedDate"] = encode_param(submitted_date, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/aggregation/v2/partners/applications",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.AppStatuses,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncApplicationsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        app_name: typing.Optional[str] = None,
        application_id: typing.Optional[str] = None,
        modified_date: typing.Optional[int] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        pre_app_id: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        submitted_date: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppStatuses:
        """
        Get the status of your application registration(s).

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if app_name is not None:
            _query["appName"] = encode_param(app_name, False)
        if application_id is not None:
            _query["applicationId"] = encode_param(application_id, False)
        if modified_date is not None:
            _query["modifiedDate"] = encode_param(modified_date, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if page_size is not None:
            _query["pageSize"] = encode_param(page_size, False)
        if pre_app_id is not None:
            _query["preAppId"] = encode_param(pre_app_id, False)
        if status is not None:
            _query["status"] = encode_param(status, False)
        if submitted_date is not None:
            _query["submittedDate"] = encode_param(submitted_date, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/aggregation/v2/partners/applications",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.AppStatuses,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
