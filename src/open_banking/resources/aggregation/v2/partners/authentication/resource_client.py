"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    AsyncBaseClient,
    RequestOptions,
    SyncBaseClient,
    default_request_options,
    to_encodable,
)
from open_banking.types.aggregation.v2.partners.authentication import params, models
import typing


class AuthenticationClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def put(
        self,
        *,
        data: typing.Dict[str, typing.Any],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Change the Partner Secret used to authenticate this partner.

        The secret does not expire, but can be changed by calling this API. A valid Partner Secret may contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &, *, _, -, +. It must include at least one number and at least one letter, and its length should be between 12 and 255 characters.

        _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=typing.Dict[str, typing.Any])
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PUT",
            path="/aggregation/v2/partners/authentication",
            auth_names=["FinicityAppKey"],
            json=_json,
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def create(
        self,
        *,
        data: params.PartnerCredentials,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AccessToken:
        """
        Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for accessing Finicity APIs.
        * The token is valid for two hours and is required on all calls to the Finicity APIs
        * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then check the current timestamp before making any calls. If the token is greater than 90 minutes, generate a new one.
        * ‚ö†Ô∏è After five failed attempts to authenticate, your account will be locked. To reset your account, you can report a support issue using the support.finicity.com portal. Alternatively, contact your Client Success Manager or your onboarding representative.

        _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerPartnerCredentials)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/aggregation/v2/partners/authentication",
            auth_names=["FinicityAppKey"],
            json=_json,
            cast_to=models.AccessToken,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAuthenticationClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def put(
        self,
        *,
        data: typing.Dict[str, typing.Any],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Change the Partner Secret used to authenticate this partner.

        The secret does not expire, but can be changed by calling this API. A valid Partner Secret may contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &, *, _, -, +. It must include at least one number and at least one letter, and its length should be between 12 and 255 characters.

        _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=typing.Dict[str, typing.Any])
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PUT",
            path="/aggregation/v2/partners/authentication",
            auth_names=["FinicityAppKey"],
            json=_json,
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def create(
        self,
        *,
        data: params.PartnerCredentials,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AccessToken:
        """
        Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for accessing Finicity APIs.
        * The token is valid for two hours and is required on all calls to the Finicity APIs
        * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then check the current timestamp before making any calls. If the token is greater than 90 minutes, generate a new one.
        * ‚ö†Ô∏è After five failed attempts to authenticate, your account will be locked. To reset your account, you can report a support issue using the support.finicity.com portal. Alternatively, contact your Client Success Manager or your onboarding representative.

        _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerPartnerCredentials)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/aggregation/v2/partners/authentication",
            auth_names=["FinicityAppKey"],
            json=_json,
            cast_to=models.AccessToken,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
