"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import AsyncBaseClient, SyncBaseClient
from open_banking.resources.aggregation.v2.customers.accounts import (
    AccountsClient,
    AsyncAccountsClient,
)
from open_banking.resources.aggregation.v2.customers.transactions import (
    TransactionsClient,
    AsyncTransactionsClient,
)
from open_banking.resources.aggregation.v2.customers.active import (
    AsyncActiveClient,
    ActiveClient,
)
from open_banking.resources.aggregation.v2.customers.testing import (
    TestingClient,
    AsyncTestingClient,
)
from open_banking.resources.aggregation.v2.customers.institution_logins import (
    InstitutionLoginsClient,
    AsyncInstitutionLoginsClient,
)


class CustomersClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.accounts = AccountsClient(base_client=self._base_client)
        self.transactions = TransactionsClient(base_client=self._base_client)
        self.active = ActiveClient(base_client=self._base_client)
        self.testing = TestingClient(base_client=self._base_client)
        self.institution_logins = InstitutionLoginsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)


class AsyncCustomersClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.accounts = AsyncAccountsClient(base_client=self._base_client)
        self.transactions = AsyncTransactionsClient(base_client=self._base_client)
        self.active = AsyncActiveClient(base_client=self._base_client)
        self.testing = AsyncTestingClient(base_client=self._base_client)
        self.institution_logins = AsyncInstitutionLoginsClient(
            base_client=self._base_client
        )

    # register async api methods (keep comment for code generation)
