"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    SyncBaseClient,
    default_request_options,
    encode_param,
    RequestOptions,
    QueryParams,
    AsyncBaseClient,
)
import typing
from open_banking.types.aggregation.v3.customers.accounts.owner import models


class OwnerClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        customer_id: str,
        account_id: str,
        with_insights: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AccountOwnerHolders:
        """
        This service retrieves the account details for an account holder from an institution. The following data objects are available.

        * Account holders

        * Addresses

        * Emails

        * Phones

        * Documentations

        * Identity Insights


        Note: The data returned varies from institution to institution as not all of them make the same data available. This is a premium service, billable per each successful API call.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if with_insights is not None:
            _query["withInsights"] = encode_param(with_insights, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/aggregation/v3/customers/{customer_id}/accounts/{account_id}/owner",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.AccountOwnerHolders,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncOwnerClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        customer_id: str,
        account_id: str,
        with_insights: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AccountOwnerHolders:
        """
        This service retrieves the account details for an account holder from an institution. The following data objects are available.

        * Account holders

        * Addresses

        * Emails

        * Phones

        * Documentations

        * Identity Insights


        Note: The data returned varies from institution to institution as not all of them make the same data available. This is a premium service, billable per each successful API call.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if with_insights is not None:
            _query["withInsights"] = encode_param(with_insights, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/aggregation/v3/customers/{customer_id}/accounts/{account_id}/owner",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.AccountOwnerHolders,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
