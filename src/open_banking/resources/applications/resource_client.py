"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    AsyncBaseClient,
    default_request_options,
    SyncBaseClient,
    QueryParams,
    encode_param,
    RequestOptions,
)
from open_banking.resources.applications.institutions import (
    AsyncInstitutionsClient,
    InstitutionsClient,
)
import typing
from open_banking.types.applications import models


class ApplicationsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.institutions = InstitutionsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        application_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        pre_app_id: typing.Optional[int] = None,
        start: typing.Optional[int] = None,
        status: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ApplicationResponse:
        """
        This endpoint returns the status of the submitted application and provides additional details.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if application_id is not None:
            _query["application_id"] = encode_param(application_id, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if name is not None:
            _query["name"] = encode_param(name, False)
        if pre_app_id is not None:
            _query["pre_app_id"] = encode_param(pre_app_id, False)
        if start is not None:
            _query["start"] = encode_param(start, False)
        if status is not None:
            _query["status"] = encode_param(status, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/applications",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.ApplicationResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncApplicationsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.institutions = AsyncInstitutionsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        application_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        pre_app_id: typing.Optional[int] = None,
        start: typing.Optional[int] = None,
        status: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ApplicationResponse:
        """
        This endpoint returns the status of the submitted application and provides additional details.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if application_id is not None:
            _query["application_id"] = encode_param(application_id, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if name is not None:
            _query["name"] = encode_param(name, False)
        if pre_app_id is not None:
            _query["pre_app_id"] = encode_param(pre_app_id, False)
        if start is not None:
            _query["start"] = encode_param(start, False)
        if status is not None:
            _query["status"] = encode_param(status, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/applications",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.ApplicationResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
