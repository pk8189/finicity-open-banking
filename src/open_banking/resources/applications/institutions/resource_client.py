"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    AsyncBaseClient,
    RequestOptions,
    SyncBaseClient,
    encode_param,
    default_request_options,
    QueryParams,
)
import typing
from open_banking.types.applications.institutions import models


class InstitutionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        application_id: str,
        institution_id: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        start: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InstitutionResponse:
        """
        The registration status of the approved application against the financial institutions.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if institution_id is not None:
            _query["institution_id"] = encode_param(institution_id, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if start is not None:
            _query["start"] = encode_param(start, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/applications/{application_id}/institutions",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.InstitutionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncInstitutionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        application_id: str,
        institution_id: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        start: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InstitutionResponse:
        """
        The registration status of the approved application against the financial institutions.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if institution_id is not None:
            _query["institution_id"] = encode_param(institution_id, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if start is not None:
            _query["start"] = encode_param(start, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/applications/{application_id}/institutions",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=models.InstitutionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
