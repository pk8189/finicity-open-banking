"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    SyncBaseClient,
    encode_param,
    RequestOptions,
    AsyncBaseClient,
    QueryParams,
    default_request_options,
)
import typing
from open_banking.types.connect.experiences import models


class ExperiencesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        app_name: str,
        product_code: typing.Optional[typing.List[str]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[models.Experiences]:
        """
        Retrieve Connect experiences by application name. Optionally, filter the experiences by product codes.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["appName"] = encode_param(app_name, False)
        if product_code is not None:
            _query["productCode"] = encode_param(product_code, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/connect/experiences",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=typing.List[models.Experiences],
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncExperiencesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        app_name: str,
        product_code: typing.Optional[typing.List[str]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[models.Experiences]:
        """
        Retrieve Connect experiences by application name. Optionally, filter the experiences by product codes.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["appName"] = encode_param(app_name, False)
        if product_code is not None:
            _query["productCode"] = encode_param(product_code, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/connect/experiences",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            query_params=_query,
            cast_to=typing.List[models.Experiences],
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
