"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    RequestOptions,
    default_request_options,
    AsyncBaseClient,
    SyncBaseClient,
    to_encodable,
)
from open_banking.types.connect.v2.send.email_resource.joint_borrower import (
    models,
    params,
)
import typing


class JointBorrowerClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.ConnectJointBorrowerEmailParameters,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ConnectEmailUrl:
        """
        Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email  to at least one of the joint borrower's email addresses.

        When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerConnectJointBorrowerEmailParameters
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/connect/v2/send/email/jointBorrower",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            json=_json,
            cast_to=models.ConnectEmailUrl,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncJointBorrowerClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.ConnectJointBorrowerEmailParameters,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ConnectEmailUrl:
        """
        Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email  to at least one of the joint borrower's email addresses.

        When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.

        _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerConnectJointBorrowerEmailParameters
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/connect/v2/send/email/jointBorrower",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            json=_json,
            cast_to=models.ConnectEmailUrl,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
