"""File Generated by Sideko (sideko.dev)"""

from open_banking.core import (
    default_request_options,
    SyncBaseClient,
    AsyncBaseClient,
    RequestOptions,
)
from open_banking.resources.microentry.v1.customers.accounts.amounts import (
    AsyncAmountsClient,
    AmountsClient,
)
import typing
from open_banking.types.microentry.v1.customers.accounts import models


class AccountsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.amounts = AmountsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        customer_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.MicroDepositDetails:
        """
        Fetch the micro entries details.
        `customerId` and `accountId` are the identifiers of the customer and account receiving the micro entries.

          _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/microentry/v1/customers/{customer_id}/accounts/{account_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.MicroDepositDetails,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAccountsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.amounts = AsyncAmountsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        customer_id: str,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.MicroDepositDetails:
        """
        Fetch the micro entries details.
        `customerId` and `accountId` are the identifiers of the customer and account receiving the micro entries.

          _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/microentry/v1/customers/{customer_id}/accounts/{account_id}",
            auth_names=["FinicityAppKey", "FinicityAppToken"],
            cast_to=models.MicroDepositDetails,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
