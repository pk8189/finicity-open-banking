"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class ReportCustomField(typing_extensions.TypedDict):
    """
    No description specified
    """

    label: typing_extensions.NotRequired[str]
    shown: typing_extensions.NotRequired[bool]
    value: typing_extensions.NotRequired[str]


class _SerializerReportCustomField(pydantic.BaseModel):
    """
    Serializer for ReportCustomField handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    label: typing.Optional[str] = pydantic.Field(alias="label", default=None)
    shown: typing.Optional[bool] = pydantic.Field(alias="shown", default=None)
    value: typing.Optional[str] = pydantic.Field(alias="value", default=None)


class VoaReportConstraints(typing_extensions.TypedDict):
    """
    No description specified
    """

    account_ids: typing_extensions.NotRequired[str]
    from_date: typing_extensions.NotRequired[int]
    report_custom_fields: typing_extensions.NotRequired[typing.List[ReportCustomField]]
    show_nsf: typing_extensions.NotRequired[bool]


class _SerializerVoaReportConstraints(pydantic.BaseModel):
    """
    Serializer for VoaReportConstraints handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    account_ids: typing.Optional[str] = pydantic.Field(alias="accountIds", default=None)
    from_date: typing.Optional[int] = pydantic.Field(alias="fromDate", default=None)
    report_custom_fields: typing.Optional[typing.List[_SerializerReportCustomField]] = (
        pydantic.Field(alias="reportCustomFields", default=None)
    )
    show_nsf: typing.Optional[bool] = pydantic.Field(alias="showNsf", default=None)
