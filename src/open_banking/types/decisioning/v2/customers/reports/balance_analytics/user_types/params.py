"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AnalyticsReportData(typing_extensions.TypedDict):
    """
    Parameters supplied by the client requesting the analytics.
    """

    applicant_is_personal_guarantor: typing_extensions.NotRequired[bool]
    for_cra_purpose: typing_extensions.Required[bool]
    time_interval_types: typing_extensions.NotRequired[typing.List[str]]


class _SerializerAnalyticsReportData(pydantic.BaseModel):
    """
    Serializer for AnalyticsReportData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    applicant_is_personal_guarantor: typing.Optional[bool] = pydantic.Field(
        alias="applicantIsPersonalGuarantor", default=None
    )
    for_cra_purpose: bool = pydantic.Field(alias="forCraPurpose")
    time_interval_types: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="timeIntervalTypes", default=None
    )


class ReportCustomField(typing_extensions.TypedDict):
    """
    No description specified
    """

    label: typing_extensions.NotRequired[str]
    shown: typing_extensions.NotRequired[bool]
    value: typing_extensions.NotRequired[str]


class _SerializerReportCustomField(pydantic.BaseModel):
    """
    Serializer for ReportCustomField handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    label: typing.Optional[str] = pydantic.Field(alias="label", default=None)
    shown: typing.Optional[bool] = pydantic.Field(alias="shown", default=None)
    value: typing.Optional[str] = pydantic.Field(alias="value", default=None)


class AnalyticsReportConstraints(typing_extensions.TypedDict):
    """
    No description specified
    """

    account_ids: typing_extensions.NotRequired[str]
    analytics_report_data: typing_extensions.NotRequired[AnalyticsReportData]
    from_date: typing_extensions.NotRequired[int]
    report_custom_fields: typing_extensions.NotRequired[typing.List[ReportCustomField]]


class _SerializerAnalyticsReportConstraints(pydantic.BaseModel):
    """
    Serializer for AnalyticsReportConstraints handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    account_ids: typing.Optional[str] = pydantic.Field(alias="accountIds", default=None)
    analytics_report_data: typing.Optional[_SerializerAnalyticsReportData] = (
        pydantic.Field(alias="analyticsReportData", default=None)
    )
    from_date: typing.Optional[int] = pydantic.Field(alias="fromDate", default=None)
    report_custom_fields: typing.Optional[typing.List[_SerializerReportCustomField]] = (
        pydantic.Field(alias="reportCustomFields", default=None)
    )
