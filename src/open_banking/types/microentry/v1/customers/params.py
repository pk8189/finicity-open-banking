"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class Receiver(typing_extensions.TypedDict):
    """
    No description specified
    """

    account_number: typing_extensions.Required[str]
    account_type: typing_extensions.Required[str]
    memo: typing_extensions.NotRequired[str]
    name: typing_extensions.Required[str]
    routing_number: typing_extensions.Required[str]


class _SerializerReceiver(pydantic.BaseModel):
    """
    Serializer for Receiver handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    account_number: str = pydantic.Field(alias="accountNumber")
    account_type: str = pydantic.Field(alias="accountType")
    memo: typing.Optional[str] = pydantic.Field(alias="memo", default=None)
    name: str = pydantic.Field(alias="name")
    routing_number: str = pydantic.Field(alias="routingNumber")


class MicroDepositInitiation(typing_extensions.TypedDict):
    """
    No description specified
    """

    callback_url: typing_extensions.NotRequired[str]
    institution_login_id: typing_extensions.NotRequired[str]
    receiver: typing_extensions.Required[Receiver]


class _SerializerMicroDepositInitiation(pydantic.BaseModel):
    """
    Serializer for MicroDepositInitiation handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    callback_url: typing.Optional[str] = pydantic.Field(
        alias="callbackUrl", default=None
    )
    institution_login_id: typing.Optional[str] = pydantic.Field(
        alias="institutionLoginId", default=None
    )
    receiver: _SerializerReceiver = pydantic.Field(alias="receiver")
