"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class App(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    application_id: typing.Optional[str] = pydantic.Field(
        alias="applicationId", default=None
    )
    created_date: typing.Optional[str] = pydantic.Field(
        alias="createdDate", default=None
    )
    modified_date: typing.Optional[str] = pydantic.Field(
        alias="modifiedDate", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    note: typing.Optional[str] = pydantic.Field(alias="note", default=None)
    pre_app_id: typing.Optional[int] = pydantic.Field(alias="preAppId", default=None)
    scopes: typing.Optional[str] = pydantic.Field(alias="scopes", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)
    submitted_date: typing.Optional[str] = pydantic.Field(
        alias="submittedDate", default=None
    )


class ApplicationResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    applications: typing.Optional[typing.List[App]] = pydantic.Field(
        alias="applications", default=None
    )
    displaying: typing.Optional[int] = pydantic.Field(alias="displaying", default=None)
    found: typing.Optional[int] = pydantic.Field(alias="found", default=None)
    more_available: typing.Optional[bool] = pydantic.Field(
        alias="moreAvailable", default=None
    )
