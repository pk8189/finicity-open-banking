"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class InstitutionAddress(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address_line1: typing.Optional[str] = pydantic.Field(
        alias="addressLine1", default=None
    )
    address_line2: typing.Optional[str] = pydantic.Field(
        alias="addressLine2", default=None
    )
    city: typing.Optional[str] = pydantic.Field(alias="city", default=None)
    country: typing.Optional[str] = pydantic.Field(alias="country", default=None)
    postal_code: typing.Optional[str] = pydantic.Field(alias="postalCode", default=None)
    state: typing.Optional[str] = pydantic.Field(alias="state", default=None)


class Branding(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    alternate_logo: typing.Optional[str] = pydantic.Field(
        alias="alternateLogo", default=None
    )
    icon: typing.Optional[str] = pydantic.Field(alias="icon", default=None)
    logo: typing.Optional[str] = pydantic.Field(alias="logo", default=None)
    primary_color: typing.Optional[str] = pydantic.Field(
        alias="primaryColor", default=None
    )
    tile: typing.Optional[str] = pydantic.Field(alias="tile", default=None)


class Institution(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_owner: bool = pydantic.Field(alias="accountOwner")
    account_type_description: typing.Optional[str] = pydantic.Field(
        alias="accountTypeDescription", default=None
    )
    ach: bool = pydantic.Field(alias="ach")
    address: typing.Optional[InstitutionAddress] = pydantic.Field(
        alias="address", default=None
    )
    aha: bool = pydantic.Field(alias="aha")
    avail_balance: bool = pydantic.Field(alias="availBalance")
    branding: typing.Optional[Branding] = pydantic.Field(alias="branding", default=None)
    class_field: typing.Optional[str] = pydantic.Field(alias="class", default=None)
    currency: str = pydantic.Field(alias="currency")
    email_field: typing.Optional[str] = pydantic.Field(alias="email", default=None)
    id: int = pydantic.Field(alias="id")
    loan_payment_details: typing.Optional[bool] = pydantic.Field(
        alias="loanPaymentDetails", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    new_institution_id: typing.Optional[int] = pydantic.Field(
        alias="newInstitutionId", default=None
    )
    oauth_enabled: bool = pydantic.Field(alias="oauthEnabled")
    oauth_institution_id: typing.Optional[int] = pydantic.Field(
        alias="oauthInstitutionId", default=None
    )
    phone: typing.Optional[str] = pydantic.Field(alias="phone", default=None)
    special_instructions: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="specialInstructions", default=None
    )
    special_instutions_title: typing.Optional[str] = pydantic.Field(
        alias="specialInstutionsTitle", default=None
    )
    special_text: typing.Optional[str] = pydantic.Field(
        alias="specialText", default=None
    )
    state_agg: bool = pydantic.Field(alias="stateAgg")
    status: str = pydantic.Field(alias="status")
    student_loan_data: typing.Optional[bool] = pydantic.Field(
        alias="studentLoanData", default=None
    )
    time_zone: typing.Optional[str] = pydantic.Field(alias="timeZone", default=None)
    trans_agg: bool = pydantic.Field(alias="transAgg")
    url_forgot_password: typing.Optional[str] = pydantic.Field(
        alias="urlForgotPassword", default=None
    )
    url_home_app: typing.Optional[str] = pydantic.Field(
        alias="urlHomeApp", default=None
    )
    url_logon_app: typing.Optional[str] = pydantic.Field(
        alias="urlLogonApp", default=None
    )
    url_online_registration: typing.Optional[str] = pydantic.Field(
        alias="urlOnlineRegistration", default=None
    )
    voa: bool = pydantic.Field(alias="voa")
    voi: bool = pydantic.Field(alias="voi")


class InstitutionWrapper(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    institution: Institution = pydantic.Field(alias="institution")


class Institutions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_date: int = pydantic.Field(alias="createdDate")
    displaying: int = pydantic.Field(alias="displaying")
    found: int = pydantic.Field(alias="found")
    institutions: typing.List[Institution] = pydantic.Field(alias="institutions")
    more_available: bool = pydantic.Field(alias="moreAvailable")
