"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class CustomerAccountDetail(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    after_tax_amount: typing.Optional[float] = pydantic.Field(
        alias="afterTaxAmount", default=None
    )
    auto_pay_enrolled: typing.Optional[bool] = pydantic.Field(
        alias="autoPayEnrolled", default=None
    )
    available_balance_amount: typing.Optional[float] = pydantic.Field(
        alias="availableBalanceAmount", default=None
    )
    available_cash_balance: typing.Optional[float] = pydantic.Field(
        alias="availableCashBalance", default=None
    )
    balloon_amount: typing.Optional[float] = pydantic.Field(
        alias="balloonAmount", default=None
    )
    buy_power: typing.Optional[float] = pydantic.Field(alias="buyPower", default=None)
    cash_account_allowed: typing.Optional[bool] = pydantic.Field(
        alias="cashAccountAllowed", default=None
    )
    cash_advance_available_amount: typing.Optional[float] = pydantic.Field(
        alias="cashAdvanceAvailableAmount", default=None
    )
    cash_advance_balance: typing.Optional[float] = pydantic.Field(
        alias="cashAdvanceBalance", default=None
    )
    cash_advance_interest_rate: typing.Optional[float] = pydantic.Field(
        alias="cashAdvanceInterestRate", default=None
    )
    cash_advance_max_amount: typing.Optional[float] = pydantic.Field(
        alias="cashAdvanceMaxAmount", default=None
    )
    cash_balance_amount: typing.Optional[float] = pydantic.Field(
        alias="cashBalanceAmount", default=None
    )
    collateral: typing.Optional[str] = pydantic.Field(alias="collateral", default=None)
    contrib_total_ytd: typing.Optional[float] = pydantic.Field(
        alias="contribTotalYtd", default=None
    )
    convert_to_repayment: typing.Optional[int] = pydantic.Field(
        alias="convertToRepayment", default=None
    )
    credit_available_amount: typing.Optional[float] = pydantic.Field(
        alias="creditAvailableAmount", default=None
    )
    credit_max_amount: typing.Optional[float] = pydantic.Field(
        alias="creditMaxAmount", default=None
    )
    current_balance: typing.Optional[float] = pydantic.Field(
        alias="currentBalance", default=None
    )
    current_loan_balance: typing.Optional[float] = pydantic.Field(
        alias="currentLoanBalance", default=None
    )
    current_school: typing.Optional[str] = pydantic.Field(
        alias="currentSchool", default=None
    )
    date_as_of: typing.Optional[int] = pydantic.Field(alias="dateAsOf", default=None)
    days_delinquent: typing.Optional[int] = pydantic.Field(
        alias="daysDelinquent", default=None
    )
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    emp_match_amount: typing.Optional[float] = pydantic.Field(
        alias="empMatchAmount", default=None
    )
    emp_pretax_contrib_amount: typing.Optional[float] = pydantic.Field(
        alias="empPretaxContribAmount", default=None
    )
    emp_pretax_contrib_amount_ytd: typing.Optional[float] = pydantic.Field(
        alias="empPretaxContribAmountYtd", default=None
    )
    ending_balance_amount: typing.Optional[float] = pydantic.Field(
        alias="endingBalanceAmount", default=None
    )
    escrow_balance: typing.Optional[float] = pydantic.Field(
        alias="escrowBalance", default=None
    )
    expected_payoff_date: typing.Optional[int] = pydantic.Field(
        alias="expectedPayoffDate", default=None
    )
    fees_balance: typing.Optional[float] = pydantic.Field(
        alias="feesBalance", default=None
    )
    first_mortgage: typing.Optional[bool] = pydantic.Field(
        alias="firstMortgage", default=None
    )
    first_payment_date: typing.Optional[int] = pydantic.Field(
        alias="firstPaymentDate", default=None
    )
    guarantor: typing.Optional[str] = pydantic.Field(alias="guarantor", default=None)
    initial_interest_rate: typing.Optional[float] = pydantic.Field(
        alias="initialInterestRate", default=None
    )
    initial_ml_amount: typing.Optional[float] = pydantic.Field(
        alias="initialMlAmount", default=None
    )
    initial_ml_date: typing.Optional[int] = pydantic.Field(
        alias="initialMlDate", default=None
    )
    interest_balance: typing.Optional[float] = pydantic.Field(
        alias="interestBalance", default=None
    )
    interest_paid_ltd: typing.Optional[float] = pydantic.Field(
        alias="interestPaidLtd", default=None
    )
    interest_period: typing.Optional[str] = pydantic.Field(
        alias="interestPeriod", default=None
    )
    interest_prior_ytd_amount: typing.Optional[float] = pydantic.Field(
        alias="interestPriorYtdAmount", default=None
    )
    interest_rate: typing.Optional[str] = pydantic.Field(
        alias="interestRate", default=None
    )
    interest_rate_type: typing.Optional[str] = pydantic.Field(
        alias="interestRateType", default=None
    )
    interest_subsidy_type: typing.Optional[str] = pydantic.Field(
        alias="interestSubsidyType", default=None
    )
    interest_ytd_amount: typing.Optional[float] = pydantic.Field(
        alias="interestYtdAmount", default=None
    )
    last_payment_amount: typing.Optional[float] = pydantic.Field(
        alias="lastPaymentAmount", default=None
    )
    last_payment_date: typing.Optional[int] = pydantic.Field(
        alias="lastPaymentDate", default=None
    )
    last_payment_due_date: typing.Optional[int] = pydantic.Field(
        alias="lastPaymentDueDate", default=None
    )
    last_payment_escrow_amount: typing.Optional[float] = pydantic.Field(
        alias="lastPaymentEscrowAmount", default=None
    )
    last_payment_interest_amount: typing.Optional[float] = pydantic.Field(
        alias="lastPaymentInterestAmount", default=None
    )
    last_payment_last_fee_amount: typing.Optional[float] = pydantic.Field(
        alias="lastPaymentLastFeeAmount", default=None
    )
    last_payment_late_charge: typing.Optional[float] = pydantic.Field(
        alias="lastPaymentLateCharge", default=None
    )
    last_payment_principal_amount: typing.Optional[float] = pydantic.Field(
        alias="lastPaymentPrincipalAmount", default=None
    )
    last_payment_receive_date: typing.Optional[int] = pydantic.Field(
        alias="lastPaymentReceiveDate", default=None
    )
    late_fee_amount: typing.Optional[float] = pydantic.Field(
        alias="lateFeeAmount", default=None
    )
    lender: typing.Optional[str] = pydantic.Field(alias="lender", default=None)
    loan_award_id: typing.Optional[str] = pydantic.Field(
        alias="loanAwardId", default=None
    )
    loan_payment_freq: typing.Optional[str] = pydantic.Field(
        alias="loanPaymentFreq", default=None
    )
    loan_payment_type: typing.Optional[str] = pydantic.Field(
        alias="loanPaymentType", default=None
    )
    loan_rate: typing.Optional[float] = pydantic.Field(alias="loanRate", default=None)
    loan_status: typing.Optional[str] = pydantic.Field(alias="loanStatus", default=None)
    loan_status_end_date: typing.Optional[int] = pydantic.Field(
        alias="loanStatusEndDate", default=None
    )
    loan_status_start_date: typing.Optional[int] = pydantic.Field(
        alias="loanStatusStartDate", default=None
    )
    loan_term_type: typing.Optional[str] = pydantic.Field(
        alias="loanTermType", default=None
    )
    loan_ytd_fees_paid: typing.Optional[float] = pydantic.Field(
        alias="loanYtdFeesPaid", default=None
    )
    loan_ytd_interest_paid: typing.Optional[float] = pydantic.Field(
        alias="loanYtdInterestPaid", default=None
    )
    loan_ytd_principal_paid: typing.Optional[float] = pydantic.Field(
        alias="loanYtdPrincipalPaid", default=None
    )
    margin_allowed: typing.Optional[bool] = pydantic.Field(
        alias="marginAllowed", default=None
    )
    margin_balance: typing.Optional[float] = pydantic.Field(
        alias="marginBalance", default=None
    )
    match_amount: typing.Optional[float] = pydantic.Field(
        alias="matchAmount", default=None
    )
    maturity_date: typing.Optional[int] = pydantic.Field(
        alias="maturityDate", default=None
    )
    maturity_value_amount: typing.Optional[float] = pydantic.Field(
        alias="maturityValueAmount", default=None
    )
    ml_holder_name: typing.Optional[str] = pydantic.Field(
        alias="mlHolderName", default=None
    )
    next_payment: typing.Optional[float] = pydantic.Field(
        alias="nextPayment", default=None
    )
    next_payment_date: typing.Optional[int] = pydantic.Field(
        alias="nextPaymentDate", default=None
    )
    next_payment_interest_amount: typing.Optional[float] = pydantic.Field(
        alias="nextPaymentInterestAmount", default=None
    )
    next_payment_principal_amount: typing.Optional[float] = pydantic.Field(
        alias="nextPaymentPrincipalAmount", default=None
    )
    open_date: typing.Optional[int] = pydantic.Field(alias="openDate", default=None)
    original_interest_rate: typing.Optional[float] = pydantic.Field(
        alias="originalInterestRate", default=None
    )
    original_maturity_date: typing.Optional[int] = pydantic.Field(
        alias="originalMaturityDate", default=None
    )
    original_school: typing.Optional[str] = pydantic.Field(
        alias="originalSchool", default=None
    )
    other_nonvest_amount: typing.Optional[float] = pydantic.Field(
        alias="otherNonvestAmount", default=None
    )
    other_vest_amount: typing.Optional[float] = pydantic.Field(
        alias="otherVestAmount", default=None
    )
    out_of_school_date: typing.Optional[int] = pydantic.Field(
        alias="outOfSchoolDate", default=None
    )
    owner: typing.Optional[str] = pydantic.Field(alias="owner", default=None)
    past_due_amount: typing.Optional[float] = pydantic.Field(
        alias="pastDueAmount", default=None
    )
    payment_due_date: typing.Optional[int] = pydantic.Field(
        alias="paymentDueDate", default=None
    )
    payment_min_amount: typing.Optional[float] = pydantic.Field(
        alias="paymentMinAmount", default=None
    )
    payments_made: typing.Optional[int] = pydantic.Field(
        alias="paymentsMade", default=None
    )
    payments_remaining: typing.Optional[int] = pydantic.Field(
        alias="paymentsRemaining", default=None
    )
    payoff_amount: typing.Optional[float] = pydantic.Field(
        alias="payoffAmount", default=None
    )
    payoff_amount_date: typing.Optional[int] = pydantic.Field(
        alias="payoffAmountDate", default=None
    )
    period_deposit_amount: typing.Optional[float] = pydantic.Field(
        alias="periodDepositAmount", default=None
    )
    period_end_date: typing.Optional[int] = pydantic.Field(
        alias="periodEndDate", default=None
    )
    period_interest_amount: typing.Optional[float] = pydantic.Field(
        alias="periodInterestAmount", default=None
    )
    period_interest_rate: typing.Optional[float] = pydantic.Field(
        alias="periodInterestRate", default=None
    )
    period_start_date: typing.Optional[int] = pydantic.Field(
        alias="periodStartDate", default=None
    )
    pre_tax_amount: typing.Optional[float] = pydantic.Field(
        alias="preTaxAmount", default=None
    )
    previous_balance: typing.Optional[float] = pydantic.Field(
        alias="previousBalance", default=None
    )
    principal_balance: typing.Optional[float] = pydantic.Field(
        alias="principalBalance", default=None
    )
    profit_sharing_amount: typing.Optional[float] = pydantic.Field(
        alias="profitSharingAmount", default=None
    )
    projected_interest: typing.Optional[float] = pydantic.Field(
        alias="projectedInterest", default=None
    )
    recurring_payment_amount: typing.Optional[float] = pydantic.Field(
        alias="recurringPaymentAmount", default=None
    )
    remaining_term_of_ml: typing.Optional[float] = pydantic.Field(
        alias="remainingTermOfMl", default=None
    )
    repayment_plan: typing.Optional[str] = pydantic.Field(
        alias="repaymentPlan", default=None
    )
    repayment_plan_end_date: typing.Optional[int] = pydantic.Field(
        alias="repaymentPlanEndDate", default=None
    )
    repayment_plan_start_date: typing.Optional[int] = pydantic.Field(
        alias="repaymentPlanStartDate", default=None
    )
    reward_earned_balance: typing.Optional[int] = pydantic.Field(
        alias="rewardEarnedBalance", default=None
    )
    rollover_amount: typing.Optional[float] = pydantic.Field(
        alias="rolloverAmount", default=None
    )
    rollover_ltd: typing.Optional[float] = pydantic.Field(
        alias="rolloverLtd", default=None
    )
    short_balance: typing.Optional[float] = pydantic.Field(
        alias="shortBalance", default=None
    )
    statement_close_balance: typing.Optional[float] = pydantic.Field(
        alias="statementCloseBalance", default=None
    )
    statement_credit_amount: typing.Optional[float] = pydantic.Field(
        alias="statementCreditAmount", default=None
    )
    statement_end_date: typing.Optional[int] = pydantic.Field(
        alias="statementEndDate", default=None
    )
    statement_finance_amount: typing.Optional[float] = pydantic.Field(
        alias="statementFinanceAmount", default=None
    )
    statement_purchase_amount: typing.Optional[float] = pydantic.Field(
        alias="statementPurchaseAmount", default=None
    )
    statement_start_date: typing.Optional[int] = pydantic.Field(
        alias="statementStartDate", default=None
    )
    term_of_ml: typing.Optional[str] = pydantic.Field(alias="termOfMl", default=None)
    total_amount_paid: typing.Optional[float] = pydantic.Field(
        alias="totalAmountPaid", default=None
    )
    total_interest_paid: typing.Optional[float] = pydantic.Field(
        alias="totalInterestPaid", default=None
    )
    total_principal_paid: typing.Optional[float] = pydantic.Field(
        alias="totalPrincipalPaid", default=None
    )
    vested_balance: typing.Optional[float] = pydantic.Field(
        alias="vestedBalance", default=None
    )
    weighted_interest_rate: typing.Optional[float] = pydantic.Field(
        alias="weightedInterestRate", default=None
    )
    ytd_insurance_paid: typing.Optional[float] = pydantic.Field(
        alias="ytdInsurancePaid", default=None
    )
    ytd_interest_paid: typing.Optional[float] = pydantic.Field(
        alias="ytdInterestPaid", default=None
    )
    ytd_principal_paid: typing.Optional[float] = pydantic.Field(
        alias="ytdPrincipalPaid", default=None
    )
    ytd_tax_paid: typing.Optional[float] = pydantic.Field(
        alias="ytdTaxPaid", default=None
    )


class CustomerAccountPosition1(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    asset_class: typing.Optional[str] = pydantic.Field(alias="assetClass", default=None)
    change_percent: typing.Optional[float] = pydantic.Field(
        alias="changePercent", default=None
    )
    cost_basis: typing.Optional[float] = pydantic.Field(alias="costBasis", default=None)
    cost_basis_per_share: typing.Optional[float] = pydantic.Field(
        alias="costBasisPerShare", default=None
    )
    currency_rate: typing.Optional[float] = pydantic.Field(
        alias="currencyRate", default=None
    )
    current_price: typing.Optional[float] = pydantic.Field(
        alias="currentPrice", default=None
    )
    current_price_date: typing.Optional[int] = pydantic.Field(
        alias="currentPriceDate", default=None
    )
    daily_change: typing.Optional[float] = pydantic.Field(
        alias="dailyChange", default=None
    )
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    fi_asset_class: typing.Optional[str] = pydantic.Field(
        alias="fiAssetClass", default=None
    )
    hold_type: typing.Optional[str] = pydantic.Field(alias="holdType", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    inv_security_type: typing.Optional[str] = pydantic.Field(
        alias="invSecurityType", default=None
    )
    market_value: typing.Optional[float] = pydantic.Field(
        alias="marketValue", default=None
    )
    mf_type: typing.Optional[str] = pydantic.Field(alias="mfType", default=None)
    option_expire_date: typing.Optional[str] = pydantic.Field(
        alias="optionExpireDate", default=None
    )
    option_shares_per_contract: typing.Optional[float] = pydantic.Field(
        alias="optionSharesPerContract", default=None
    )
    option_strike_price: typing.Optional[float] = pydantic.Field(
        alias="optionStrikePrice", default=None
    )
    option_type: typing.Optional[str] = pydantic.Field(alias="optionType", default=None)
    pos_type: typing.Optional[str] = pydantic.Field(alias="posType", default=None)
    security_currency: typing.Optional[str] = pydantic.Field(
        alias="securityCurrency", default=None
    )
    security_id: typing.Optional[str] = pydantic.Field(alias="securityId", default=None)
    security_id_type: typing.Optional[str] = pydantic.Field(
        alias="securityIdType", default=None
    )
    security_name: typing.Optional[str] = pydantic.Field(
        alias="securityName", default=None
    )
    security_type: typing.Optional[str] = pydantic.Field(
        alias="securityType", default=None
    )
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)
    sub_account_type: typing.Optional[str] = pydantic.Field(
        alias="subAccountType", default=None
    )
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
    today_gl_dollar: typing.Optional[float] = pydantic.Field(
        alias="todayGLDollar", default=None
    )
    today_gl_percent: typing.Optional[float] = pydantic.Field(
        alias="todayGLPercent", default=None
    )
    total_gl_dollar: typing.Optional[float] = pydantic.Field(
        alias="totalGLDollar", default=None
    )
    total_gl_percent: typing.Optional[float] = pydantic.Field(
        alias="totalGLPercent", default=None
    )
    transaction_type: typing.Optional[str] = pydantic.Field(
        alias="transactionType", default=None
    )
    units: typing.Optional[float] = pydantic.Field(alias="units", default=None)


class CustomerAccount(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_number_display: str = pydantic.Field(alias="accountNumberDisplay")
    aggregation_attempt_date: typing.Optional[int] = pydantic.Field(
        alias="aggregationAttemptDate", default=None
    )
    aggregation_status_code: typing.Optional[int] = pydantic.Field(
        alias="aggregationStatusCode", default=None
    )
    aggregation_success_date: typing.Optional[int] = pydantic.Field(
        alias="aggregationSuccessDate", default=None
    )
    balance: typing.Optional[float] = pydantic.Field(alias="balance", default=None)
    balance_date: typing.Optional[int] = pydantic.Field(
        alias="balanceDate", default=None
    )
    created_date: int = pydantic.Field(alias="createdDate")
    currency: str = pydantic.Field(alias="currency")
    customer_id: str = pydantic.Field(alias="customerId")
    detail: typing.Optional[CustomerAccountDetail] = pydantic.Field(
        alias="detail", default=None
    )
    display_position: typing.Optional[int] = pydantic.Field(
        alias="displayPosition", default=None
    )
    id: str = pydantic.Field(alias="id")
    institution_id: str = pydantic.Field(alias="institutionId")
    institution_login_id: int = pydantic.Field(alias="institutionLoginId")
    last_transaction_date: typing.Optional[int] = pydantic.Field(
        alias="lastTransactionDate", default=None
    )
    last_updated_date: typing.Optional[int] = pydantic.Field(
        alias="lastUpdatedDate", default=None
    )
    market_segment: typing.Optional[str] = pydantic.Field(
        alias="marketSegment", default=None
    )
    name: str = pydantic.Field(alias="name")
    number: str = pydantic.Field(alias="number")
    oldest_transaction_date: typing.Optional[int] = pydantic.Field(
        alias="oldestTransactionDate", default=None
    )
    parent_account: typing.Optional[str] = pydantic.Field(
        alias="parentAccount", default=None
    )
    position: typing.Optional[typing.List[CustomerAccountPosition1]] = pydantic.Field(
        alias="position", default=None
    )
    real_account_number_last4: typing.Optional[str] = pydantic.Field(
        alias="realAccountNumberLast4", default=None
    )
    status: str = pydantic.Field(alias="status")
    type: str = pydantic.Field(alias="type")
