"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class LoanPaymentDetailsLoan(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_id: str = pydantic.Field(alias="accountId")
    loan_future_payoff_amount: typing.Optional[float] = pydantic.Field(
        alias="loanFuturePayoffAmount", default=None
    )
    loan_future_payoff_date: typing.Optional[str] = pydantic.Field(
        alias="loanFuturePayoffDate", default=None
    )
    loan_number: str = pydantic.Field(alias="loanNumber")
    loan_payment_address: str = pydantic.Field(alias="loanPaymentAddress")
    loan_payment_number: str = pydantic.Field(alias="loanPaymentNumber")


class LoanPaymentDetailsGroup(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_id: str = pydantic.Field(alias="accountId")
    group_future_payoff_amount: typing.Optional[float] = pydantic.Field(
        alias="groupFuturePayoffAmount", default=None
    )
    group_future_payoff_date: typing.Optional[str] = pydantic.Field(
        alias="groupFuturePayoffDate", default=None
    )
    group_loan_detail: typing.List[LoanPaymentDetailsLoan] = pydantic.Field(
        alias="groupLoanDetail"
    )
    group_number: str = pydantic.Field(alias="groupNumber")
    group_payment_address: str = pydantic.Field(alias="groupPaymentAddress")
    group_payment_number: str = pydantic.Field(alias="groupPaymentNumber")


class LoanPaymentDetailsAccount(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_future_payoff_amount: typing.Optional[float] = pydantic.Field(
        alias="accountFuturePayoffAmount", default=None
    )
    account_future_payoff_date: typing.Optional[str] = pydantic.Field(
        alias="accountFuturePayoffDate", default=None
    )
    account_id: str = pydantic.Field(alias="accountId")
    account_number: str = pydantic.Field(alias="accountNumber")
    account_payment_address: str = pydantic.Field(alias="accountPaymentAddress")
    account_payment_number: str = pydantic.Field(alias="accountPaymentNumber")
    group_detail: typing.Optional[typing.List[LoanPaymentDetailsGroup]] = (
        pydantic.Field(alias="groupDetail", default=None)
    )
    loan_detail: typing.Optional[typing.List[LoanPaymentDetailsLoan]] = pydantic.Field(
        alias="loanDetail", default=None
    )


class LoanPaymentDetails(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_detail: typing.Optional[LoanPaymentDetailsAccount] = pydantic.Field(
        alias="accountDetail", default=None
    )
    loan_number: str = pydantic.Field(alias="loanNumber")
    loan_payment_address: str = pydantic.Field(alias="loanPaymentAddress")
    loan_payment_number: str = pydantic.Field(alias="loanPaymentNumber")
