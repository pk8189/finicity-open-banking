"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class CustomerAccountSimple(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_number_display: str = pydantic.Field(alias="accountNumberDisplay")
    aggregation_attempt_date: typing.Optional[int] = pydantic.Field(
        alias="aggregationAttemptDate", default=None
    )
    aggregation_status_code: typing.Optional[int] = pydantic.Field(
        alias="aggregationStatusCode", default=None
    )
    aggregation_success_date: typing.Optional[int] = pydantic.Field(
        alias="aggregationSuccessDate", default=None
    )
    created_date: int = pydantic.Field(alias="createdDate")
    currency: str = pydantic.Field(alias="currency")
    customer_id: str = pydantic.Field(alias="customerId")
    display_position: int = pydantic.Field(alias="displayPosition")
    id: str = pydantic.Field(alias="id")
    institution_id: str = pydantic.Field(alias="institutionId")
    institution_login_id: int = pydantic.Field(alias="institutionLoginId")
    name: str = pydantic.Field(alias="name")
    parent_account: typing.Optional[str] = pydantic.Field(
        alias="parentAccount", default=None
    )
    status: str = pydantic.Field(alias="status")
    type: str = pydantic.Field(alias="type")


class CustomerAccountsSimple(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    accounts: typing.List[CustomerAccountSimple] = pydantic.Field(alias="accounts")
