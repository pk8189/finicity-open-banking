"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class Application(typing_extensions.TypedDict):
    """
    No description specified
    """

    app_description: typing_extensions.Required[str]
    app_name: typing_extensions.Required[str]
    app_url: typing_extensions.Required[str]
    image: typing_extensions.Required[str]
    owner_address_line1: typing_extensions.Required[str]
    owner_address_line2: typing_extensions.Required[str]
    owner_city: typing_extensions.Required[str]
    owner_country: typing_extensions.Required[str]
    owner_name: typing_extensions.Required[str]
    owner_postal_code: typing_extensions.Required[str]
    owner_state: typing_extensions.Required[str]


class _SerializerApplication(pydantic.BaseModel):
    """
    Serializer for Application handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_description: str = pydantic.Field(alias="appDescription")
    app_name: str = pydantic.Field(alias="appName")
    app_url: str = pydantic.Field(alias="appUrl")
    image: str = pydantic.Field(alias="image")
    owner_address_line1: str = pydantic.Field(alias="ownerAddressLine1")
    owner_address_line2: str = pydantic.Field(alias="ownerAddressLine2")
    owner_city: str = pydantic.Field(alias="ownerCity")
    owner_country: str = pydantic.Field(alias="ownerCountry")
    owner_name: str = pydantic.Field(alias="ownerName")
    owner_postal_code: str = pydantic.Field(alias="ownerPostalCode")
    owner_state: str = pydantic.Field(alias="ownerState")
