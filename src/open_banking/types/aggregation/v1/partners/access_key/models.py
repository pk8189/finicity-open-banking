"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class ThirdPartyAccessProof(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    key_id: typing.Optional[str] = pydantic.Field(alias="keyId", default=None)
    signature: typing.Optional[str] = pydantic.Field(alias="signature", default=None)
    timestamp: typing.Optional[str] = pydantic.Field(alias="timestamp", default=None)


class ThirdPartyAccessPeriod(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    end_time: str = pydantic.Field(alias="endTime")
    start_time: str = pydantic.Field(alias="startTime")
    type: str = pydantic.Field(alias="type")


class ThirdPartyAccessProvenance(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    client_fingerprint: typing.Optional[str] = pydantic.Field(
        alias="clientFingerprint", default=None
    )
    ip_address: typing.Optional[str] = pydantic.Field(alias="ipAddress", default=None)
    token_field: typing.Optional[str] = pydantic.Field(alias="token", default=None)


class ThirdPartyAccessProduct(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    access_period: ThirdPartyAccessPeriod = pydantic.Field(alias="accessPeriod")
    account_id: str = pydantic.Field(alias="accountId")
    max_calls: typing.Optional[int] = pydantic.Field(alias="maxCalls", default=None)
    payor_id: typing.Optional[str] = pydantic.Field(alias="payorId", default=None)
    product: str = pydantic.Field(alias="product")


class ThirdPartyAccessReceipt(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    customer_id: typing.Optional[str] = pydantic.Field(alias="customerId", default=None)
    partner_id: typing.Optional[str] = pydantic.Field(alias="partnerId", default=None)
    products: typing.Optional[typing.List[ThirdPartyAccessProduct]] = pydantic.Field(
        alias="products", default=None
    )
    profile_field: typing.Optional[int] = pydantic.Field(alias="profile", default=None)
    provenance: typing.Optional[ThirdPartyAccessProvenance] = pydantic.Field(
        alias="provenance", default=None
    )
    receipt_id: typing.Optional[str] = pydantic.Field(alias="receiptId", default=None)
    timestamp: typing.Optional[str] = pydantic.Field(alias="timestamp", default=None)
    version: typing.Optional[str] = pydantic.Field(alias="version", default=None)


class ThirdPartyAccessReceiptData(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    proof: typing.Optional[ThirdPartyAccessProof] = pydantic.Field(
        alias="proof", default=None
    )
    receipt: typing.Optional[ThirdPartyAccessReceipt] = pydantic.Field(
        alias="receipt", default=None
    )


class ThirdPartyAccessKeyReceiptData(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[typing.List[ThirdPartyAccessReceiptData]] = pydantic.Field(
        alias="data", default=None
    )
