"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class ThirdPartyAccessPeriod(typing_extensions.TypedDict):
    """
    Object which describes access validity
    """

    end_time: typing_extensions.Required[str]
    start_time: typing_extensions.Required[str]
    type: typing_extensions.Required[str]


class _SerializerThirdPartyAccessPeriod(pydantic.BaseModel):
    """
    Serializer for ThirdPartyAccessPeriod handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    end_time: str = pydantic.Field(alias="endTime")
    start_time: str = pydantic.Field(alias="startTime")
    type: str = pydantic.Field(alias="type")


class ThirdPartyAccessProvenance(typing_extensions.TypedDict):
    """
    Provenance regarding the calling client like &#x60;clientFingerprint&#x60;, &#x60;ipAddress&#x60; and &#x60;token&#x60;.
    """

    client_fingerprint: typing_extensions.NotRequired[str]
    ip_address: typing_extensions.NotRequired[str]
    token_field: typing_extensions.NotRequired[str]


class _SerializerThirdPartyAccessProvenance(pydantic.BaseModel):
    """
    Serializer for ThirdPartyAccessProvenance handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    client_fingerprint: typing.Optional[str] = pydantic.Field(
        alias="clientFingerprint", default=None
    )
    ip_address: typing.Optional[str] = pydantic.Field(alias="ipAddress", default=None)
    token_field: typing.Optional[str] = pydantic.Field(alias="token", default=None)


class ThirdPartyAccessProduct(typing_extensions.TypedDict):
    """
    Product for which access token to be generated
    """

    access_period: typing_extensions.Required[ThirdPartyAccessPeriod]
    account_id: typing_extensions.Required[str]
    max_calls: typing_extensions.NotRequired[int]
    payor_id: typing_extensions.NotRequired[str]
    product: typing_extensions.Required[str]


class _SerializerThirdPartyAccessProduct(pydantic.BaseModel):
    """
    Serializer for ThirdPartyAccessProduct handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    access_period: _SerializerThirdPartyAccessPeriod = pydantic.Field(
        alias="accessPeriod"
    )
    account_id: str = pydantic.Field(alias="accountId")
    max_calls: typing.Optional[int] = pydantic.Field(alias="maxCalls", default=None)
    payor_id: typing.Optional[str] = pydantic.Field(alias="payorId", default=None)
    product: str = pydantic.Field(alias="product")


class ThirdPartyAccessKeyData(typing_extensions.TypedDict):
    """
    An object representing the third party access key request

    * &#x60;customerId&#x60;: This is recipient&#x27;s customer identifier
    * &#x60;partnerId&#x60;: This is recipient partner identifier
    * &#x60;thirdPartyPartnerId&#x60;: This is requester&#x27;s partner identifier
    * &#x60;products&#x60;: Array of values representing the Mastercard Open Banking APIs for
    which access needs to be generated.
    """

    customer_id: typing_extensions.Required[str]
    partner_id: typing_extensions.Required[str]
    products: typing_extensions.Required[typing.List[ThirdPartyAccessProduct]]
    provenance: typing_extensions.NotRequired[ThirdPartyAccessProvenance]
    third_party_partner_id: typing_extensions.Required[str]


class _SerializerThirdPartyAccessKeyData(pydantic.BaseModel):
    """
    Serializer for ThirdPartyAccessKeyData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    customer_id: str = pydantic.Field(alias="customerId")
    partner_id: str = pydantic.Field(alias="partnerId")
    products: typing.List[_SerializerThirdPartyAccessProduct] = pydantic.Field(
        alias="products"
    )
    provenance: typing.Optional[_SerializerThirdPartyAccessProvenance] = pydantic.Field(
        alias="provenance", default=None
    )
    third_party_partner_id: str = pydantic.Field(alias="thirdPartyPartnerId")
