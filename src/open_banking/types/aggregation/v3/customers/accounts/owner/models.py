"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class AccountOwnerAddress(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    city: typing.Optional[str] = pydantic.Field(alias="city", default=None)
    country: typing.Optional[str] = pydantic.Field(alias="country", default=None)
    line1: typing.Optional[str] = pydantic.Field(alias="line1", default=None)
    line2: typing.Optional[str] = pydantic.Field(alias="line2", default=None)
    line3: typing.Optional[str] = pydantic.Field(alias="line3", default=None)
    owner_address: typing.Optional[str] = pydantic.Field(
        alias="ownerAddress", default=None
    )
    postal_code: typing.Optional[str] = pydantic.Field(alias="postalCode", default=None)
    state: typing.Optional[str] = pydantic.Field(alias="state", default=None)
    type: typing.Optional[str] = pydantic.Field(alias="type", default=None)


class AccountOwnerDocumentation(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    government_id: typing.Optional[str] = pydantic.Field(
        alias="governmentId", default=None
    )
    tax_id: typing.Optional[str] = pydantic.Field(alias="taxId", default=None)
    tax_id_country: typing.Optional[str] = pydantic.Field(
        alias="taxIdCountry", default=None
    )


class AccountOwnerEmail(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    email_field: typing.Optional[str] = pydantic.Field(alias="email", default=None)
    email_type: typing.Optional[str] = pydantic.Field(alias="emailType", default=None)
    is_primary: typing.Optional[bool] = pydantic.Field(alias="isPrimary", default=None)


class AccountOwnerIdentityInsights(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address_to_name: typing.Optional[str] = pydantic.Field(
        alias="addressToName", default=None
    )
    address_validity_level: typing.Optional[float] = pydantic.Field(
        alias="addressValidityLevel", default=None
    )
    email_domain_creation_date: typing.Optional[str] = pydantic.Field(
        alias="emailDomainCreationDate", default=None
    )
    email_first_seen_days: typing.Optional[float] = pydantic.Field(
        alias="emailFirstSeenDays", default=None
    )
    email_to_name: typing.Optional[str] = pydantic.Field(
        alias="emailToName", default=None
    )
    identity_network_score: typing.Optional[float] = pydantic.Field(
        alias="identityNetworkScore", default=None
    )
    identity_risk_score: typing.Optional[float] = pydantic.Field(
        alias="identityRiskScore", default=None
    )
    ip_address_distance: typing.Optional[float] = pydantic.Field(
        alias="ipAddressDistance", default=None
    )
    ip_geolocation_country_code: typing.Optional[str] = pydantic.Field(
        alias="ipGeolocationCountryCode", default=None
    )
    ip_geolocation_subdivision: typing.Optional[str] = pydantic.Field(
        alias="ipGeolocationSubdivision", default=None
    )
    ip_last_seen_days: typing.Optional[float] = pydantic.Field(
        alias="ipLastSeenDays", default=None
    )
    ip_phone_distance: typing.Optional[float] = pydantic.Field(
        alias="ipPhoneDistance", default=None
    )
    ip_risk: typing.Optional[float] = pydantic.Field(alias="ipRisk", default=None)
    ip_risk_score: typing.Optional[float] = pydantic.Field(
        alias="ipRiskScore", default=None
    )
    is_email_valid: typing.Optional[bool] = pydantic.Field(
        alias="isEmailValid", default=None
    )
    is_phone_valid: typing.Optional[bool] = pydantic.Field(
        alias="isPhoneValid", default=None
    )
    phone_carrier: typing.Optional[str] = pydantic.Field(
        alias="phoneCarrier", default=None
    )
    phone_country_code: typing.Optional[str] = pydantic.Field(
        alias="phoneCountryCode", default=None
    )
    phone_email_first_seen_days: typing.Optional[float] = pydantic.Field(
        alias="phoneEmailFirstSeenDays", default=None
    )
    phone_last_seen_days: typing.Optional[float] = pydantic.Field(
        alias="phoneLastSeenDays", default=None
    )
    phone_line_type: typing.Optional[str] = pydantic.Field(
        alias="phoneLineType", default=None
    )
    phone_to_address: typing.Optional[str] = pydantic.Field(
        alias="phoneToAddress", default=None
    )
    phone_to_name: typing.Optional[str] = pydantic.Field(
        alias="phoneToName", default=None
    )
    warnings_field: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="warnings", default=None
    )


class AccountOwnerPhone(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    country: typing.Optional[str] = pydantic.Field(alias="country", default=None)
    phone: typing.Optional[str] = pydantic.Field(alias="phone", default=None)
    type: typing.Optional[str] = pydantic.Field(alias="type", default=None)


class AccountOwnerDetails(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    addresses: typing.Optional[typing.List[AccountOwnerAddress]] = pydantic.Field(
        alias="addresses", default=None
    )
    documentations: typing.Optional[typing.List[AccountOwnerDocumentation]] = (
        pydantic.Field(alias="documentations", default=None)
    )
    emails: typing.Optional[typing.List[AccountOwnerEmail]] = pydantic.Field(
        alias="emails", default=None
    )
    first_name: typing.Optional[str] = pydantic.Field(alias="firstName", default=None)
    identity_insights: typing.Optional[AccountOwnerIdentityInsights] = pydantic.Field(
        alias="identityInsights", default=None
    )
    last_name: typing.Optional[str] = pydantic.Field(alias="lastName", default=None)
    middle_name: typing.Optional[str] = pydantic.Field(alias="middleName", default=None)
    name_classification: str = pydantic.Field(alias="nameClassification")
    name_classificationconfidencescore: typing.Optional[float] = pydantic.Field(
        alias="nameClassificationconfidencescore", default=None
    )
    owner_name: str = pydantic.Field(alias="ownerName")
    phones: typing.Optional[typing.List[AccountOwnerPhone]] = pydantic.Field(
        alias="phones", default=None
    )
    relationship: typing.Optional[str] = pydantic.Field(
        alias="relationship", default=None
    )
    suffix: typing.Optional[str] = pydantic.Field(alias="suffix", default=None)


class AccountOwnerHolders(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    holders: typing.List[AccountOwnerDetails] = pydantic.Field(alias="holders")
